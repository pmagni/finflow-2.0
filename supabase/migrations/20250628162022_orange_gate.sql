-- This is a merged and improved schema based on the previous schema.sql and finflow_schema.sql

-- Enable UUID extension if not enabled
create extension if not exists "uuid-ossp" with schema "extensions";

-- CUSTOM TYPES
create type if not exists public.app_permission as enum ('channels.delete', 'messages.delete');
create type if not exists public.app_role as enum ('admin', 'moderator');

-- USERS
-- Supabase provides a users table in the auth schema. We'll link to it.

-- ORGANIZATIONS
create table if not exists public.organizations (
    id uuid primary key default uuid_generate_v4(),
    name text not null,
    created_at timestamp with time zone default timezone('utc', now())
);

-- ORGANIZATION MEMBERSHIPS
create table if not exists public.organization_memberships (
    id uuid primary key default uuid_generate_v4(),
    user_id uuid references auth.users(id) on delete cascade,
    organization_id uuid references public.organizations(id) on delete cascade,
    role text default 'member', -- e.g., 'admin', 'member'
    created_at timestamp with time zone default timezone('utc', now())
);

-- USER ROLES (using proper app_role type)
create table if not exists public.user_roles (
    id bigint generated by default as identity primary key,
    user_id uuid references auth.users on delete cascade not null,
    role app_role not null,
    unique (user_id, role)
);
comment on table public.user_roles is 'Application roles for each user.';

-- ROLE PERMISSIONS
create table if not exists public.role_permissions (
    id bigint generated by default as identity primary key,
    role app_role not null,
    permission app_permission not null,
    unique (role, permission)
);
comment on table public.role_permissions is 'Application permissions for each role.';

-- DEBT MODULE
create table if not exists public.debts (
    id uuid primary key default uuid_generate_v4(),
    user_id uuid references auth.users(id) on delete cascade not null,
    name text,
    balance numeric not null,
    interest_rate numeric,
    minimum_payment numeric,
    created_at timestamp with time zone default timezone('utc', now())
);

-- DEBT PLANS
create table if not exists public.debt_plans (
    id uuid primary key default uuid_generate_v4(),
    user_id uuid references auth.users(id) on delete cascade not null,
    name text not null,
    monthly_income numeric,
    budget_percentage numeric,
    payment_strategy text, -- e.g., 'avalanche', 'snowball'
    is_active boolean default true,
    created_at timestamp with time zone default timezone('utc', now())
);

-- SAVINGS GOALS
create table if not exists public.savings_goals (
    id uuid primary key default uuid_generate_v4(),
    user_id uuid references auth.users(id) on delete cascade not null,
    name text not null,
    target_amount numeric not null,
    current_amount numeric default 0,
    created_at timestamp with time zone default timezone('utc', now())
);

-- BUDGET MODULE
create table if not exists public.budgets (
    id uuid primary key default uuid_generate_v4(),
    user_id uuid references auth.users(id) on delete cascade not null,
    month text,
    income numeric,
    fixed_expenses numeric,
    variable_expenses numeric,
    savings_goal numeric,
    discretionary_spend numeric,
    created_at timestamp with time zone default timezone('utc', now())
);

-- AI CHAT HISTORY
create table if not exists public.ai_chat_history (
    id uuid primary key default uuid_generate_v4(),
    user_id uuid references auth.users(id) on delete cascade not null,
    messages jsonb, -- Storing conversation history as an array of objects
    created_at timestamp with time zone default timezone('utc', now())
);

-- GAMIFICATION
create table if not exists public.achievements (
    id uuid primary key default uuid_generate_v4(),
    user_id uuid references auth.users(id) on delete cascade not null,
    title text,
    description text,
    achieved_at timestamp with time zone default timezone('utc', now())
);

-- HEALTH SCORE
create table if not exists public.financial_health_scores (
    id uuid primary key default uuid_generate_v4(),
    user_id uuid references auth.users(id) on delete cascade not null,
    score numeric, -- using numeric for more flexibility
    calculated_at timestamp with time zone default timezone('utc', now())
);

-- TRANSACTIONS (for manual expense tracking)
create table if not exists public.transactions (
    id uuid primary key default uuid_generate_v4(),
    user_id uuid references auth.users(id) on delete cascade not null,
    category text not null,
    amount numeric not null,
    description text,
    transaction_date date not null,
    type text check (type in ('income', 'expense')) not null,
    created_at timestamp with time zone default timezone('utc', now())
);

-- BUDGET SNAPSHOTS (monthly budget snapshots)
create table if not exists public.budget_snapshots (
    id uuid primary key default uuid_generate_v4(),
    user_id uuid references auth.users(id) on delete cascade not null,
    month_year text not null, -- format: 'YYYY-MM'
    snapshot_data jsonb not null, -- stores complete budget state
    total_income numeric,
    total_expenses numeric,
    total_savings numeric,
    created_at timestamp with time zone default timezone('utc', now())
);

-- EDUCATION MODULES
create table if not exists public.education_modules (
    id uuid primary key default uuid_generate_v4(),
    title text not null,
    description text,
    content jsonb not null, -- stores module content
    difficulty_level text check (difficulty_level in ('beginner', 'intermediate', 'advanced')) default 'beginner',
    category text not null, -- e.g., 'budgeting', 'debt', 'savings'
    estimated_duration_minutes integer default 10,
    is_active boolean default true,
    created_at timestamp with time zone default timezone('utc', now())
);

-- USER EDUCATION PROGRESS
create table if not exists public.user_education_progress (
    id uuid primary key default uuid_generate_v4(),
    user_id uuid references auth.users(id) on delete cascade not null,
    module_id uuid references public.education_modules(id) on delete cascade not null,
    completed boolean default false,
    completed_at timestamp with time zone,
    progress_percentage integer default 0,
    created_at timestamp with time zone default timezone('utc', now())
);

-- GAMIFICATION EVENTS
create table if not exists public.gamification_events (
    id uuid primary key default uuid_generate_v4(),
    user_id uuid references auth.users(id) on delete cascade not null,
    event_type text not null, -- e.g., 'debt_paid', 'budget_met', 'savings_goal_reached'
    points_earned integer default 0,
    metadata jsonb, -- additional event data
    created_at timestamp with time zone default timezone('utc', now())
);

-- USER PREFERENCES
create table if not exists public.user_preferences (
    id uuid primary key default uuid_generate_v4(),
    user_id uuid references auth.users(id) on delete cascade not null unique,
    currency text default 'USD',
    language text default 'es',
    notifications_enabled boolean default true,
    email_notifications boolean default true,
    push_notifications boolean default true,
    theme text check (theme in ('light', 'dark', 'auto')) default 'auto',
    created_at timestamp with time zone default timezone('utc', now()),
    updated_at timestamp with time zone default timezone('utc', now())
);

-- SEED DATA FOR ROLE PERMISSIONS
insert into public.role_permissions (role, permission)
values
    ('admin', 'channels.delete'),
    ('admin', 'messages.delete'),
    ('moderator', 'messages.delete')
on conflict (role, permission) do nothing;

-- HELPER FUNCTIONS
create or replace function public.authorize(
    requested_permission app_permission,
    user_id uuid
)
returns boolean as $$
declare
    bind_permissions int;
begin
    select count(*)
    from public.role_permissions
    inner join public.user_roles on role_permissions.role = user_roles.role
    where user_roles.user_id = authorize.user_id
      and role_permissions.permission = requested_permission
    into bind_permissions;

    return bind_permissions > 0;
end;
$$ language plpgsql security definer;

-- GET USER DATA RPC FUNCTION
create or replace function public.get_user_data()
returns json as $$
declare
    user_data json;
begin
    select json_build_object(
        'id', auth.uid(),
        'email', (select email from auth.users where id = auth.uid()),
        'roles', (
            select coalesce(json_agg(role), '[]'::json)
            from public.user_roles
            where user_id = auth.uid()
        ),
        'preferences', (
            select row_to_json(up.*)
            from public.user_preferences up
            where up.user_id = auth.uid()
        ),
        'organizations', (
            select coalesce(json_agg(
                json_build_object(
                    'id', o.id,
                    'name', o.name,
                    'role', om.role
                )
            ), '[]'::json)
            from public.organization_memberships om
            join public.organizations o on o.id = om.organization_id
            where om.user_id = auth.uid()
        )
    ) into user_data;

    return user_data;
end;
$$ language plpgsql security definer;

-- RLS POLICIES
-- First, enable RLS for all tables
alter table public.organizations enable row level security;
alter table public.organization_memberships enable row level security;
alter table public.user_roles enable row level security;
alter table public.role_permissions enable row level security;
alter table public.debts enable row level security;
alter table public.debt_plans enable row level security;
alter table public.budgets enable row level security;
alter table public.ai_chat_history enable row level security;
alter table public.achievements enable row level security;
alter table public.financial_health_scores enable row level security;
alter table public.savings_goals enable row level security;
alter table public.transactions enable row level security;
alter table public.budget_snapshots enable row level security;
alter table public.education_modules enable row level security;
alter table public.user_education_progress enable row level security;
alter table public.gamification_events enable row level security;
alter table public.user_preferences enable row level security;

-- Organizations
create policy "Users can view organizations they are a member of."
on public.organizations for select
using (auth.uid() in (
  select user_id from public.organization_memberships where organization_id = id
));

create policy "Authenticated users can create organizations."
on public.organizations for insert
with check (auth.role() = 'authenticated');

-- Organization Memberships
create policy "Users can view their own memberships."
on public.organization_memberships for select
using (auth.uid() = user_id);

create policy "Users can insert their own membership"
on public.organization_memberships for insert
with check (auth.uid() = user_id);

create policy "Admins can manage memberships."
on public.organization_memberships for all
using (
  auth.uid() in (
    select om.user_id from public.organization_memberships as om where om.organization_id = organization_memberships.organization_id and om.role = 'admin'
  )
);

-- USER ROLES POLICIES
create policy "Admins can assign roles" on public.user_roles
    for insert with check (public.authorize('channels.delete', auth.uid()));

create policy "Admins can view roles" on public.user_roles
    for select using (public.authorize('channels.delete', auth.uid()));

create policy "Users can view their own roles" on public.user_roles
    for select using (auth.uid() = user_id);

-- ROLE PERMISSIONS POLICIES
create policy "Admins can view role permissions" on public.role_permissions
    for select using (public.authorize('channels.delete', auth.uid()));

-- Generic policies for user-owned data
-- DEBTS
create policy "Users can manage their own debts."
on public.debts for all
using (auth.uid() = user_id)
with check (auth.uid() = user_id);

-- DEBT PLANS
create policy "Users can manage their own debt plans."
on public.debt_plans for all
using (auth.uid() = user_id)
with check (auth.uid() = user_id);

-- BUDGETS
create policy "Users can manage their own budgets."
on public.budgets for all
using (auth.uid() = user_id)
with check (auth.uid() = user_id);

-- AI CHAT HISTORY
create policy "Users can manage their own chat history."
on public.ai_chat_history for all
using (auth.uid() = user_id)
with check (auth.uid() = user_id);

-- ACHIEVEMENTS
create policy "Users can view their own achievements."
on public.achievements for select
using (auth.uid() = user_id);

-- FINANCIAL HEALTH SCORES
create policy "Users can view their own financial health scores."
on public.financial_health_scores for select
using (auth.uid() = user_id);

-- SAVINGS GOALS
create policy "Users can manage their own savings goals."
on public.savings_goals for all
using (auth.uid() = user_id)
with check (auth.uid() = user_id);

-- TRANSACTIONS
create policy "Users can manage their own transactions."
on public.transactions for all
using (auth.uid() = user_id)
with check (auth.uid() = user_id);

-- BUDGET SNAPSHOTS
create policy "Users can manage their own budget snapshots."
on public.budget_snapshots for all
using (auth.uid() = user_id)
with check (auth.uid() = user_id);

-- EDUCATION MODULES (read-only for all authenticated users)
create policy "Authenticated users can view education modules."
on public.education_modules for select
using (auth.role() = 'authenticated' and is_active = true);

-- USER EDUCATION PROGRESS
create policy "Users can manage their own education progress."
on public.user_education_progress for all
using (auth.uid() = user_id)
with check (auth.uid() = user_id);

-- GAMIFICATION EVENTS
create policy "Users can view their own gamification events."
on public.gamification_events for select
using (auth.uid() = user_id);

create policy "System can insert gamification events."
on public.gamification_events for insert
with check (true); -- Allow system to insert events

-- USER PREFERENCES
create policy "Users can manage their own preferences."
on public.user_preferences for all
using (auth.uid() = user_id)
with check (auth.uid() = user_id);

-- Create indexes for better performance
create index if not exists idx_debts_user_id on public.debts(user_id);
create index if not exists idx_budgets_user_id on public.budgets(user_id);
create index if not exists idx_transactions_user_id on public.transactions(user_id);
create index if not exists idx_transactions_date on public.transactions(transaction_date);
create index if not exists idx_savings_goals_user_id on public.savings_goals(user_id);
create index if not exists idx_budget_snapshots_user_month on public.budget_snapshots(user_id, month_year);
create index if not exists idx_gamification_events_user_type on public.gamification_events(user_id, event_type);

-- Create function to update updated_at timestamp
create or replace function update_updated_at_column()
returns trigger as $$
begin
    new.updated_at = timezone('utc', now());
    return new;
end;
$$ language plpgsql;

-- Create trigger for user_preferences
create trigger update_user_preferences_updated_at
    before update on public.user_preferences
    for each row
    execute function update_updated_at_column();